name: Update Function Branches

# Trigger manuell
on:
  workflow_dispatch:

jobs:
  update-functions:
    runs-on: ubuntu-latest

    # Berechtigungen: Schreibrechte für Branches und Commits
    permissions:
      contents: write

    steps:
      # Repository auschecken (vollständiger Verlauf nötig)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Python einrichten
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # Abhängigkeiten installieren
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install json5 tabulate

      # Funktionen verarbeiten und Branches erstellen
      - name: Process functions and create branches
        run: |
          python - << 'EOF'
import json5, os, subprocess, sys
from tabulate import tabulate

# === 1. Prüfen: JSON-Datei vorhanden? ===
json_file = "zenodo.json"
if not os.path.exists(json_file):
    print(f"ERROR: {json_file} not found in repository root!")
    sys.exit(1)

# === 2. JSON laden ===
try:
    with open(json_file, "r", encoding="utf-8") as f:
        data = json5.load(f)
except Exception as e:
    print(f"Error loading {json_file}: {e}")
    sys.exit(1)

# === 3. Ursprünglichen Zustand sichern ===
try:
    original_branch = subprocess.check_output(["git", "rev-parse", "--abbrev-ref", "HEAD"]).decode().strip()
    original_commit = subprocess.check_output(["git", "rev-parse", "HEAD"]).decode().strip()
    print(f"Starting from branch: {original_branch}")
    print(f"Starting from commit: {original_commit}")
except subprocess.CalledProcessError as e:
    print(f"Error getting initial git state: {e}")
    sys.exit(1)

# === 4. Vorbereitung ===
work_examples = data.get("workExample", [])
if not work_examples:
    print("No workExample entries found in zenodo.json. Skipping branch creation.")
    sys.exit(0)

print(f"Found {len(work_examples)} functions to process.\n")

dashboard = []

# === 5. Branches erstellen ===
for idx, func in enumerate(work_examples, 1):
    func_name = func.get("name", f"unknown-{idx}")
    safe_name = func_name.replace(' ', '-').replace('_', '-').lower()
    branch_name = f"func-{safe_name}-v{idx}"
    filename = f"functions/{safe_name}.json"

    print(f"Processing [{idx}/{len(work_examples)}]: {func_name} → {branch_name}")

    try:
        # --- Zurück auf sauberen Start-Commit ---
        print(f"  Resetting to clean commit {original_commit[:8]}...")
        subprocess.run(["git", "reset", "--hard", original_commit], check=True, capture_output=True)
        subprocess.run(["git", "clean", "-fd"], check=True, capture_output=True)

        # --- Neuen Branch erstellen ---
        print(f"  Creating branch: {branch_name}")
        subprocess.run(["git", "checkout", "-b", branch_name], check=True, capture_output=True)

        # --- Datei schreiben ---
        os.makedirs("functions", exist_ok=True)
        with open(filename, "w", encoding="utf-8") as f:
            json5.dump({"workExample": [func]}, f, indent=2, quote_keys=True)
        print(f"  Created: {filename}")

        # --- Commit ---
        subprocess.run(["git", "add", filename], check=True)
        commit_msg = f"feat: add function {func_name} v{idx}"
        subprocess.run(["git", "commit", "-m", commit_msg], check=True)
        print(f"  Committed: {commit_msg}")

        # --- Push mit Fehlerbehandlung ---
        push_result = subprocess.run(
            ["git", "push", "-u", "origin", branch_name],
            capture_output=True, text=True
        )
        if push_result.returncode != 0:
            error_msg = push_result.stderr.strip()
            if "remote: error: GH006" in error_msg or "already exists" in error_msg:
                print(f"  Branch {branch_name} already exists. Forcing push...")
                subprocess.run(["git", "push", "--force-with-lease", "origin", branch_name], check=True)
            else:
                raise subprocess.CalledProcessError(push_result.returncode, "git push", output=push_result.stdout, stderr=error_msg)

        print(f"  Successfully pushed: {branch_name}")
        dashboard.append({"Function": func_name, "Branch": branch_name, "Version": idx, "File": filename})

    except Exception as e:
        print(f"  FAILED to process {branch_name}: {e}")
        # Branch bereinigen, falls teilweise erstellt
        try:
            subprocess.run(["git", "checkout", original_branch], check=True, capture_output=True)
            subprocess.run(["git", "branch", "-D", branch_name], capture_output=True, check=True)
        except:
            pass
        # Weiter mit nächster Funktion
        continue

# === 6. Zurück zum Original-Branch ===
print(f"\nReturning to original branch: {original_branch}")
try:
    subprocess.run(["git", "checkout", original_branch], check=True, capture_output=True)
    subprocess.run(["git", "reset", "--hard", original_commit], check=True, capture_output=True)
    subprocess.run(["git", "clean", "-fd"], check=True, capture_output=True)
except subprocess.CalledProcessError as e:
    print(f"Warning: Could not fully restore original branch: {e.stderr.decode()}")

# === 7. Dashboard speichern ===
print("\nCreating dashboard...")
os.makedirs("dashboard", exist_ok=True)
dashboard_file = "dashboard/functions-dashboard.json"
with open(dashboard_file, "w", encoding="utf-8") as f:
    json5.dump(dashboard, f, indent=2, quote_keys=True)

# === 8. Dashboard ausgeben ===
print("\n" + "="*50)
print(" FUNCTIONS DASHBOARD")
print("="*50)
if dashboard:
    print(tabulate(dashboard, headers="keys", tablefmt="github"))
else:
    print("No functions were successfully processed.")
print(f"\nDashboard saved to: {dashboard_file}")
EOF

      # Dashboard als Artifact hochladen
      - name: Upload dashboard artifact
        uses: actions/upload-artifact@v4
        with:
          name: functions-dashboard
          path: dashboard/functions-dashboard.json

      # Dashboard ins Haupt-Repo committen (optional, aber nützlich)
      - name: Commit and push dashboard to main branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add dashboard/functions-dashboard.json
          git commit -m "chore: update functions dashboard" || echo "No changes to commit"
          git push origin HEAD:${{ github.ref_name }} || echo "No push needed"
