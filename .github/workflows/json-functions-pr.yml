      - name: Process functions with versioning and archiving
        run: |
          python - << 'EOF'
          import json5, os, subprocess, re

          repo_dir = os.getcwd()

          with open("zenodo.json", "r") as f:
              data = json5.load(f)

          dashboard = []

          def get_latest_version(func_name):
              branches = subprocess.check_output(["git", "branch", "-r"]).decode().splitlines()
              branches = [b.strip().replace("origin/", "") for b in branches]
              prefix = f"func-{func_name}-v"
              version_branches = [b for b in branches if b.startswith(prefix) and '-archived' not in b]
              if not version_branches:
                  return None, 0
              versions = [int(re.search(r'v(\d+)', b).group(1)) for b in version_branches]
              latest_version = max(versions)
              latest_branch = [b for b in version_branches if f'v{latest_version}' in b][0]
              return latest_branch, latest_version

          def archive_branch(branch_name):
              archived_name = branch_name + "-archived"
              subprocess.run(["git", "branch", "-m", branch_name, archived_name])
              subprocess.run(["git", "push", "origin", f'{archived_name}:{archived_name}'])
              subprocess.run(["git", "push", "origin", "--delete", branch_name])

          def create_new_version_branch(func, latest_version):
              name_clean = func["name"].replace(" ", "-").lower()
              new_version = latest_version + 1
              branch_name = f"func-{name_clean}-v{new_version}"
              subprocess.run(["git", "checkout", "-b", branch_name])
              os.makedirs("functions", exist_ok=True)
              filename = f"functions/{name_clean}.json"
              json5.dump({"workExample": [func]}, open(filename, "w"), indent=2)
              subprocess.run(["git", "add", filename])
              subprocess.run(["git", "commit", "-m", f"Add function {func['name']} version v{new_version}"])
              subprocess.run(["git", "push", "-u", "origin", branch_name])
              return branch_name, new_version

          for func in data.get("workExample", []):
              name_clean = func["name"].replace(" ", "-").lower()
              latest_branch, latest_version = get_latest_version(name_clean)
              if latest_branch:
                  archive_branch(latest_branch)
              new_branch, new_version = create_new_version_branch(func, latest_version)
              dashboard.append({
                  "Function": func["name"],
                  "Branch": new_branch,
                  "Version": new_version,
                  "Archived": latest_branch if latest_branch else None
              })

          os.makedirs("dashboard", exist_ok=True)
          json5.dump(dashboard, open("dashboard/functions-dashboard.json", "w"), indent=2)
          print("\n\n==== FUNCTIONS DASHBOARD ====\n")
          from tabulate import tabulate
          print(tabulate(dashboard, headers="keys", tablefmt="github"))
          EOF
