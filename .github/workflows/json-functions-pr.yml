name: Update Function Branches

# Trigger manuell
on:
  workflow_dispatch:

jobs:
  update-functions:
    runs-on: ubuntu-latest

    # Berechtigungen: Schreibrechte für Branches und Commits
    permissions:
      contents: write

    steps:
      # Repository auschecken (vollständiger Verlauf nötig)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Python einrichten
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # Abhängigkeiten installieren
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install json5 tabulate

      # Funktionen verarbeiten und Branches erstellen
      - name: Process functions and create branches
        run: |
          python - << 'EOF'
import json5, os, subprocess, sys
from tabulate import tabulate

# === 1. Prüfen: JSON-Datei vorhanden? ===
json_file = "zenodo.json"
if not os.path.exists(json_file):
    print(f"ERROR: {json_file} not found in repository root!")
    sys.exit(1)

# === 2. JSON laden ===
try:
    with open(json_file, "r", encoding="utf-8") as f:
        data = json5.load(f)
except Exception as e:
    print(f"Error loading {json_file}: {e}")
    sys.exit(1)

# === 3. Ursprünglichen Zustand sichern ===
try:
    original_branch = subprocess.check_output(["git", "rev-parse", "--abbrev-ref", "HEAD"]).decode().strip()
    original_commit = subprocess.check_output(["git", "rev-parse", "HEAD"]).decode().strip()
    print(f"Starting from branch: {original_branch}")
    print(f"Starting from commit: {original_commit}")
except subprocess.CalledProcessError as e:
    print(f"Error getting initial git state: {e}")
    sys.exit(1)

# === 4. Vorbereitung ===
work_examples = data.get("workExample", [])
if not work_examples:
    print("No workExample entries found in zenodo.json. Skipping branch creation.")
    sys.exit(0)

print(f"Found {len(work_examples)} functions to process.\n")

dashboard = []

# === 5. Branches erstellen ===
for idx, func in enumerate(work_examples, 1):
    func_name = func.get("name", f"unknown-{idx}")
    safe_name = func_name.replace(' ', '-').replace('_', '-').lower()
    branch_name = f"func-{safe_name}-v{idx}"
    filename = f"functions/{safe_name}.json"

    print(f"Processing [{idx}/{len(work_examples)}]: {func_name} → {branch_name}")

    try:
        # --- Zurück auf sauberen Start-Commit ---
        print(f"  Resetting to clean commit {original_commit[:8]}...")
        subprocess.run(["git", "reset", "--hard", original_commit], check=True, capture_output=True)
        subprocess.run(["git", "clean", "-fd"], check=True, capture_output=True)

        # --- Neuen Branch erstellen ---
        print(f"  Creating branch: {branch_name}")
        subprocess.run(["git", "checkout", "-b", branch_name], check=True, capture
